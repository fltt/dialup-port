#! /bin/sh
#
# Copyright (c) 2023 Francesco Lattanzio
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

if test $# -lt 1; then
  /usr/bin/logger -p daemon.err -t %%PORTNAME%%/eject_cd "not enough arguments"
  exit 1
fi

command="$1"
if test "$command" != nolock; then
  cd $(/usr/bin/dirname "$0")

  . ../config

  /usr/bin/lockf -s -t $DEVICE_STALE_TIMEOUT "$EJECT_LOCK_FILE" "$0" nolock "$@"
  result=$?
  if test $result -ge 64; then
    # See sysexits(3) for the meaning of $result
    /usr/bin/logger -p daemon.err -t %%PORTNAME%%/eject_cd "could not acquire lock ($result)"
    exit 1
  fi

  exit $result
fi

shift 1

command="$1"
case "$command" in
  trigger) ;;
  device)
    if test -z "$2"; then
      /usr/bin/logger -p daemon.err -t %%PORTNAME%%/eject_cd "missing device name"
      exit 1
    fi

    device="/dev/$2" ;;
  *)
    /usr/bin/logger -p daemon.err -t %%PORTNAME%%/eject_cd "invalid command \"$command\""
    exit 1 ;;
esac

cd $(/usr/bin/dirname "$0")

. ../config

if test -e "$EJECT_DEVICE_FILE"; then
  now=$(/bin/date -v -${DEVICE_STALE_TIMEOUT}S +%s)
  ts=$(/usr/bin/stat -f "%m" "$EJECT_DEVICE_FILE")
  test $ts -gt $now || /bin/rm "$EJECT_DEVICE_FILE"
fi

if test "$command" = trigger; then
  if test -s "$EJECT_DEVICE_FILE"; then
    test -z "$EJECT_SLEEP" || /bin/sleep $EJECT_SLEEP

    exec 3<"$EJECT_DEVICE_FILE"

    while read device <&3; do
      (/usr/bin/logger -p daemon.info -t %%PORTNAME%%/eject_cd "ejecting $device"
       /sbin/camcontrol eject "$device" || /usr/bin/logger -p daemon.warning -t %%PORTNAME%%/eject_cd "error ejecting $device ($?)") &
    done

    exec 3<&-

    wait
  fi
  : >"$EJECT_DEVICE_FILE"
else
  if test -e "$EJECT_DEVICE_FILE"; then
    if test -s "$EJECT_DEVICE_FILE"; then
      # no trigger yet, append device
      echo "$device" >>"$EJECT_DEVICE_FILE"
    else
      test -z "$EJECT_SLEEP" || /bin/sleep $EJECT_SLEEP
      /usr/bin/logger -p daemon.info -t %%PORTNAME%%/eject_cd "ejecting $device"
      /sbin/camcontrol eject "$device" || /usr/bin/logger -p daemon.warning -t %%PORTNAME%%/eject_cd "error ejecting $device ($?)"
      : >"$EJECT_DEVICE_FILE"
    fi
  else
    echo "$device" >"$EJECT_DEVICE_FILE"
  fi
fi
